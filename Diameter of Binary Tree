class Solution {
public:
    pair<int, int> diameterHeight(TreeNode* root){
    if(root==NULL){
        pair<int, int> p;
        p.first = 0;
        p.second = 0;
        return p;
    }
    
    pair<int, int> left = diameterHeight(root->left);
    pair<int, int> right = diameterHeight(root->right);
    pair<int, int> output;
    output.first = max(left.first, right.first) + 1;
    output.second = max(left.first+right.first, max(left.second, right.second));
    return output;
    
}

    int diameterOfBinaryTree(TreeNode* root) {
    // code here
    pair<int, int> result = diameterHeight(root);
    return result.second;
}
};

Time Complexity - O(N)
Space Complexity - O(H)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    int diameterOfBinaryTree(TreeNode*root, int &diameter){
        if(root==NULL){
            return 0;
        }
        
        int lh = diameterOfBinaryTree(root->left, diameter);
        int rh = diameterOfBinaryTree(root->right, diameter);
        diameter = max(diameter, lh+rh);
        return max(lh, rh) + 1;
        
    }
    
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0;
        diameterOfBinaryTree(root, diameter);
        return diameter;
    }
};

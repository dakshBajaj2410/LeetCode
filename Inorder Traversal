class Solution {
  public:
    // Function to return a list containing the inorder traversal of the tree.
    vector<int> inOrder(Node* root) {
        // Your code here
        if(root==NULL){
            vector<int> v;
            return v;
        }
        vector<int> left = inOrder(root->left);
        left.push_back(root->data);
        vector<int> right = inOrder(root->right);
        for(int i = 0; i<right.size(); i++){
            left.push_back(right[i]);
        }
        return left;
        
        Time Complexity - O(N)
        Space Complexity - O(H)
-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------
#include<stack>
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        
        vector<int> v;
        stack<TreeNode*> s;
        while(root||s.size()!=0){
            while(root){
                s.push(root);
                root = root->left;
            }
            root = s.top();
            s.pop();
            v.push_back(root->val);
            root = root->right;
        }
        return v;
    }
};

------------------------------------ITERATIVE SOLUTION-------------------------------------
Time Complexity - O(M*N)
Space Complexity - O(1)
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        
        ListNode*temp1 = headA;
        while(temp1!=NULL){
            ListNode*temp2 = headB;
            while(temp2!=NULL){
                if(temp1==temp2){
                    return temp1;
                }
                temp2 = temp2->next;
            }
            temp1 = temp1->next;
        }
        return NULL;
    }
};
---------------------------------HASHMAP SOLUTION-------------------------------------------------------------------------------------------------
Time Complexity - O(M+N)
Space Complexity - O(M)
class Solution {
public:
	ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
		unordered_map<ListNode*, int> m;
		while(headA != NULL){
			m[headA]++;
			headA = headA -> next;
		}
		while(headB != NULL){
			if(m[headB] > 0){
				return headB;
			}
			headB = headB -> next;
		}
		return NULL;
	}
};

-------------------------------LENGTH DIFFERENCE SOLUTION-------------------------------------------------------------------------------------------------
Time Complexity : O(m + n)
Space Complexity : O(1)
class Solution {
public:
	ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
		int n = 0;
		int m = 0;
		ListNode* ptr1 = headA;
		ListNode* ptr2 = headB;
		while(ptr1 != NULL){
			n++;
			ptr1 = ptr1 -> next;
		}
		while(ptr2 != NULL){
			m++;
			ptr2 = ptr2 -> next;
		}
		int t = abs(n - m);
		if(n > m){
			while(t){
				headA = headA -> next;
				t--;
			}
		}
		else{
			while(t){
				headB = headB -> next;
				t--;
			}
		}
		while(headA != NULL and headB != NULL){
			if(headA == headB){
				return headA;
			}
			headA = headA -> next;
			headB = headB -> next;
		}
		return NULL;
	}
};

---------------------------------------------------------------TWO POINTERS APPROACH---------------------------------------------------------------------------
Time Complexity : O(m + n)
Space Complexity : O(1)


class Solution {
public:
	ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
		ListNode *ptr1 = headA;
		ListNode *ptr2 = headB;
		while(ptr1 != ptr2){
			if(ptr1 == NULL){
				ptr1 = headB;
			}
			else{
				ptr1 = ptr1 -> next;
			}
			if(ptr2 == NULL){
				ptr2 = headA;
			}
			else{
				ptr2 = ptr2 -> next;
			}
		}
		return ptr1;
	}
};
